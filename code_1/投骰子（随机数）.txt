随机数：

rand函数
int rand(void)

//求出并返回一个伪随机数
//包含cstdlib头文件。


随机数种子：

void srand(unsigned int seed)
//为使rand()产生一序列伪随机整数而设置起始点。
//使用1作为seed参数，可以重新初始化rand()

例3-6 投骰子的随机游戏
每个骰子有六面，点数分别为1、2、3、4、5、6。游戏者在程序开始时输入一个无符号整数，作为
产生随机数的种子。

每轮投两次骰子，第一轮如果和数为7或11则为胜，游戏结束；和数为2、3或12则为负，游戏结束；
和数为其它值则将此值作为自己的点数，继续第二轮、第三轮...直到某轮的和数等于点数则取胜，
若在此前出现和数为7则为负。

//投骰子
#include <iostream>
using namespace std;
#include <cstdlib>

enum GameStatus{WIN,LOSE,PLAYING};

int main()
{
	int sum, mypoint;
	GameStatus status;
	unsigned seed;
	int rolldice();

	cout << "请输入一个正整数：";
	cin >> seed;
	srand(seed);

	//投骰子返回和
	sum = rolldice();
	//判断和的游戏状态
	switch (sum)
	{
	case 7:
	case 11:
		status = WIN;
		break;
	case 3:
	case 12:
		status = LOSE;
	default:
		status = PLAYING;
		mypoint = sum;
		cout << "我的点数为：" << mypoint << endl;
		break;
	}
	//和的状态为继续（玩） 再次投骰子
	//直到出现输赢
	while (status == PLAYING)
	{
		sum = rolldice();
		if (sum == mypoint)
			status = WIN;
		else if (sum == 7)
			status = LOSE;
	}

	//根据游戏状态输出赢输
	if (status == WIN)
		cout << "你赢了！" << endl;
	else
		cout << "你输了！" << endl;

	return 0;
}
//投骰子 计算和 输出和
int rolldice()
{
	int die1 = 1 + rand() % 6;
	int die2 = 1 + rand() % 6;
	int sum = die1 + die2;
	cout << "投的和数为：" << sum << endl;
	return sum;
}
