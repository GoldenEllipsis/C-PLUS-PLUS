#include<iostream>  
using namespace std;
//可变数组 CArray 
class  CArray   
{ 
private:     
	int size; //数组元素的个数      
	int *ptr; //指向动态分配的数组 
public:
	//构造函数    
	CArray(int s = 0);     //形参：s代表数组元素size的个数  缺省值 0   
	//拷贝构造函数 
	CArray(CArray & a);  
	//析构函数  
	~CArray(); 
	//返回数组元素个数       
	int length() { return size; }   
	//添加数组元素函数  
	void push_back(int v); //用于在数组尾部添加一个元素v 
	//数组对象间的赋值----运算符 “= ”重载  
	CArray & operator=( const CArray & a); 
	// “[] ”运算符重载    
	int & operator[](int i)  //返回值为 int 不行!不支持 a[i] = 4     
	{//用以支持根据下标访问数组元素，     // 如n = a[i] 和a[i] = 4; 这样的语句  
		return ptr[i];     
	}  
}; 
//构造函数----动态分配数组 
CArray::CArray(int s):size(s)  
{    
	if( s == 0)    
		ptr = NULL;  
	else       
		ptr = new int[s];  
} 
//复制构造函数   
CArray::CArray(CArray & a)   
{  
	//空数组 
	if( !a.ptr) 
	{   
		ptr = NULL;   
		size = 0;   
		return;  
	} 
	//深拷贝：1、分配内存空间 
	ptr = new int[a.size]; 
	//2、复制数组元素 
	memcpy( ptr, a.ptr, sizeof(int ) * a.size); 
	//数组元素个数更新 
	size = a.size;                              
} 
//析构函数 非空，删除动态分配空间 
CArray::~CArray()  
{    
	if( ptr) delete [] ptr;   
}
// “= ”运算符重载---数组之间的赋值 
//赋值号的作用是使“=”左边对象里存放的数组，大小和内容都和右边的对象 一样
CArray & CArray::operator=( const CArray & a) 
{   	
  //1、防止a=a这样的赋值导致出错
	if( ptr == a.ptr)       
		return * this;
	//2、如果a里面的数组是空的    
	//if( a.ptr == NULL) 
	if( !a.ptr)
	{    
		if( ptr ) 
			delete [] ptr;  
		ptr = NULL;  
		size = 0;  
		return * this;    
	} 
	//3、如果原有空间不够大，才分配新的空间
	if( size < a.size) 
	{         
		if(ptr) 
			delete [] ptr;        		       
		ptr = new int[a.size];  
	} 
	//4、复制数组元素 
	memcpy( ptr,a.ptr,sizeof(int)*a.size);
	//数组元素个数更新   
	size = a.size;   
	return * this; 
} 
//在数组尾部添加一个元素
void CArray::push_back(int v) 
{      
	if( ptr) 
	{         
		int * tmpPtr = new int[size+1]; //重新分配空间        
		memcpy(tmpPtr,ptr,sizeof(int)*size); //拷贝原数组 内容        
		delete [] ptr;         
		ptr = tmpPtr;     
	}    
	else  //数组本来是空的     
		ptr = new int[1];    
	ptr[size++] = v; //加入新的数组元素 
} 

int main() 
{  
//要编写可变长整型数组类，使之能如下使用：    
	CArray a; //开始里的数组是空的    
	for( int i = 0;i < 5;++i)     
		a.push_back(i);    
	CArray a2,a3; //a2、a3空数组   
	a2 = a;  //运算符“=”重载 ，a2与a相同  
	for( int i = 0; i < a.length(); ++i )     
		cout << a2[i] << " " ; //“[] ”运算符重载 
	a2 = a3; //运算符“=”重载 ，a2又与 a3一样是空的    
	for( int i = 0; i < a2.length(); ++i ) //a2.length()返回0     
		cout << a2[i] << " ";   //“[] ”运算符重载  无输出     
	cout << endl;    
	a[3] = 100;      // “[] ”运算符重载  
	CArray a4(a);     //调用拷贝构造函数 
	for( int i = 0; i < a4.length(); ++i )     
		cout << a4[i] << " ";  //“[] ”运算符重载        
	return 0; 
} 
