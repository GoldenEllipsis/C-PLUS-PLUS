------------------------------------------------------------

//CStudent类，流提取运算符重载为友元函数
#include <iostream>
using namespace std;
class CStudent
{  
public:   
	int nAge;
	//重载为友元函数，返回值为ostream的引用 
	friend ostream & operator<<(ostream &os,CStudent &s)
	{
		os<<s.nAge;
		return os;
	}
}; 
int main()
{  
	CStudent s ;  
	s.nAge = 5;  
	cout << s <<"hello";// 
	return 0; 
}  
-----------------------------------------------------------

//Complex类 流插入、流提取运算符重载为友元函数
#include <iostream> 
#include <string> 
#include <cstdlib> 
using namespace std; 
class Complex   
{
private:    
	double real,imag;     
public:       
	Complex( double r=0, double i=0):real(r),imag(i){ };
	//重载为友元函数，返回值为ostream的引用      
	friend ostream & operator<<( ostream & os,const Complex & c);
	//重载为友元函数，返回值为istream的引用       
	friend istream & operator>>( istream & is,Complex & c);      
}; 
ostream & operator<<( ostream & os,const Complex & c) 
{  
	os << c.real << "+" << c.imag << "i"; //以"a+bi"的形式输出   
	return os; 
}  

istream & operator>>( istream & is,Complex & c) 
{     
	string s;     
	is >> s;  //将"a+bi"作为字符串读入, “a+bi” 中间不能有空格     
	int pos = s.find("+",0);      
	string sTmp = s.substr(0,pos); //分离出代表实部的字符串      
	c.real = atof(sTmp.c_str()); //c的实部      
	sTmp = s.substr(pos+1, s.length()-pos-2);  //分离出代表虚部的 字符串     
	c.imag = atof(sTmp.c_str()); //c的虚部 
	return is; 
} 
int main()
{  
	Complex c;    
	int n;     
	cin >> c >> n;     
	cout << c << "," << n;    
	return 0;  
}  
--------------------------------------------------------------------------

//Point类 流插入、流提取运算符重载为友元函数
#include <iostream> 
using namespace std;
class Point { 
	private: 
		int x; 
		int y; 
	public: 
		Point() { };
	friend istream & operator>>( istream & is,Point &p)
	{  
		is>>p.x>>p.y;
		return is; 
	} 
	friend ostream & operator<<( ostream & o,const Point & p)
	{  
		o << p.x<<","<<p.y;  
		return o; 
	} 
}; 
int main() 
{ 
 	Point p;
 	while(cin >> p) {
 		cout << p << endl;
	 }
	return 0;
}
